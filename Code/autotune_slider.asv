function varargout = autotune_slider(varargin)
% AUTOTUNE_SLIDER MATLAB code for autotune_slider.fig
%      AUTOTUNE_SLIDER, by itself, creates a new AUTOTUNE_SLIDER or raises the existing
%      singleton*.
%
%      H = AUTOTUNE_SLIDER returns the handle to a new AUTOTUNE_SLIDER or the handle to
%      the existing singleton*.
%
%      AUTOTUNE_SLIDER('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in AUTOTUNE_SLIDER.M with the given input arguments.
%
%      AUTOTUNE_SLIDER('Property','Value',...) creates a new AUTOTUNE_SLIDER or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before autotune_slider_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to autotune_slider_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help autotune_slider

% Last Modified by GUIDE v2.5 11-Dec-2019 23:11:45

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @autotune_slider_OpeningFcn, ...
                   'gui_OutputFcn',  @autotune_slider_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before autotune_slider is made visible.
function autotune_slider_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to autotune_slider (see VARARGIN)

% Choose default command line output for autotune_slider
handles.output = hObject;
[input,f_s] = audioread('middleC.mp3');
handles.audio_signal = input(:,1)';
handles.f_s = f_s;
handles.desired_freq = 277.2;
handles.file_name = 'middleC.mp3';

axes(handles.Columbia)
matlabImage = imread('Columbia_Logo.jpg');
image(matlabImage)
axis off
axis image


load('TuneTable.mat')
handles.TuneFreq = TuneFreq;
handles.Octave = 0;
% Update handles structure
guidata(hObject, handles);

% UIWAIT makes autotune_slider wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = autotune_slider_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on slider movement.
function note_slider_Callback(hObject, eventdata, handles)
% hObject    handle to note_slider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
Value = round(get(hObject, 'Value'));
set(hObject, 'Value', Value);
% Hints: get(hObject,'Value') returns position of slider
%        get(hObject,'Min') and get(hObject,'Max') to determine range of slider


% --- Executes during object creation, after setting all properties.
function note_slider_CreateFcn(hObject, eventdata, handles)
% hObject    handle to note_slider (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: slider controls usually have a light gray background.
if isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor',[.9 .9 .9]);
end



function file_name_Callback(hObject, eventdata, handles)
% hObject    handle to file_name (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of file_name as text
%        str2double(get(hObject,'String')) returns contents of file_name as a double


% --- Executes during object creation, after setting all properties.
function file_name_CreateFcn(hObject, eventdata, handles)
% hObject    handle to file_name (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in run_autotune.
function run_autotune_Callback(hObject, eventdata, handles)
% hObject    handle to run_autotune (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
slider_pos = get(handles.note_slider,'Value');
freq_idx = 12*handles.Octave + slider_pos;
desired_freq = handles.TuneFreq(freq_idx);
[output,~] = tune(handles.audio_signal,desired_freq,handles.f_s);
sound(output,handles.f_s);
guidata(hObject, handles);




% --- Executes on button press in select_audio_file.
function select_audio_file_Callback(hObject, eventdata, handles)
% hObject    handle to select_audio_file (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
[file_name,path] = uigetfile('*.mp3');handles.file_name = file_name;
[x,f_s] = audioread(fullfile(path,file_name));
handles.audio_signal = x(:,1)';
handles.f_s = f_s;
guidata(hObject, handles);


% --- Executes on selection change in Octave_Listbox.
function Octave_Listbox_Callback(hObject, eventdata, handles)
% hObject    handle to Octave_Listbox (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
index_selected = get(handles.Octave_Listbox,'Value');

handles.Octave = index_selected-1;
guidata(hObject, handles);
% Hints: contents = cellstr(get(hObject,'String')) returns Octave_Listbox contents as cell array
%        contents{get(hObject,'Value')} returns selected item from Octave_Listbox


% --- Executes during object creation, after setting all properties.
function Octave_Listbox_CreateFcn(hObject, eventdata, handles)
% hObject    handle to Octave_Listbox (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
